\documentclass[12pt]{article}

\usepackage[utf8]{inputenc}
\usepackage[a4paper, top = 3cm, left = 3cm, bottom = 3cm, right = 3cm]{geometry} 
\usepackage{mathtools, amsthm, amssymb, amsbsy}
\usepackage{float}
\usepackage{setspace}
\usepackage{listings}
\usepackage[hidelinks]{hyperref} 

% Spacing settings
\setlength{\parindent}{1.25cm}
\setlength{\parskip}{0cm}
\renewcommand{\baselinestretch}{1.5}

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<setup, include = FALSE>>=
opts_chunk$set(size = 'footnotesize')
opts_chunk$set(echo = F, results = 'hide', fig.show = 'hide')
@


\begin{flushright}
{\small
Andr√© Victor Ribeiro Amaral \\
\texttt{\href{mailto:andre.ribeiroamaral@kaust.edu.sa}{andre.ribeiroamaral@kaust.edu.sa}}
}
\end{flushright} \vspace{3pt}

\begin{center}
{\Large Applied Statistics with R (STAT215)} \\ \vspace{6pt}
{\large $1^{\text{st}}$ Tutorial Session}
\end{center} \vspace{6pt}

\noindent\textbf{Exercise 1.} In \texttt{R}, and using just one line of code, create the following matrices and assign them to the variables \texttt{W}, \texttt{X}, \texttt{Y}, and \texttt{Z}, respectively.


$
\texttt{W} = 
\begin{pmatrix}
1 & 4 & 7 \\
2 & 5 & 8 \\
3 & 6 & 9
\end{pmatrix}
$,
$
\texttt{X} = 
\begin{pmatrix}
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9
\end{pmatrix}
$,
$
\texttt{Y} = 
\begin{pmatrix}
1 & 0 & 0 \\
0 & 1 & 0 \\
0 & 0 & 1
\end{pmatrix}
$, and
$
\texttt{Z} = 
\begin{pmatrix}
0 & 0 & 1 \\
0 & 1 & 0 \\
1 & 0 & 0
\end{pmatrix}
$. Also, compute $\texttt{W}\odot\texttt{X}$ and $\texttt{Y} \cdot \texttt{Z}$, such that $\odot$ represents the element-wise multiplication and $\cdot$ matrix multiplication.

<<>>=
W <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = FALSE); W
X <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE); X
Y <- diag(3); Y

Z <- apply(X = Y, MARGIN = 1, FUN = rev); Z
W * X
Y %*% Z
@

\vspace{12pt}
\noindent\textbf{Exercise 2.} Create a matrix $[\texttt{A}]_{3 \times 3}$, such that $\texttt{a}_{ij} = i + j$, $\forall i, j$. Also, create $[\texttt{B}]_{3 \times 3}$, such that $\texttt{b}_{ij} = \texttt{TRUE}$, if $i + j$ is even, and $\texttt{b}_{ij} = \texttt{FALSE}$, otherwise. Finally, create $[\texttt{C}]_{3 \times 3}$, such that $\texttt{c}_{ij} = 1$, if $i + j \in \{1, 2, 3\}$, and $\texttt{c}_{ij} = 0$, otherwise.

<<>>=
A <- matrix(data = NA, nrow = 3, ncol = 3)
for (i in 1:3) {
  for (j in 1:3) {
    A[i, j] <- i + j
  }
}
A

func_B <- function (b) {return(!as.logical(b %% 2))}
B <- apply(X = A, MARGIN = c(1, 2), func_B); B

func_C <- function (c) {return(as.numeric(c %in% c(1, 2, 3)))}
C <- apply(X = A, MARGIN = c(1, 2), func_C); C
@

\vspace{12pt}
\noindent\textbf{Exercise 3.} Write a function for computing $n!$, for any $n$ non-negative integer. Print the 10 first numbers from the sequence $(\texttt{f}_n)_n$, such that $\texttt{f}_n = n!$, for all $n \in \mathbb{Z}_{+}$. Also, for $n = 10$, compare your result with the \texttt{gamma()} function from \texttt{R} (recall that, for any positive integer $n$, $\Gamma(n) = (n - 1)!$).

<<>>=
factorial <- function (n) {
  if ((n == 0) || (n == 1)) {return(1)}
  else {return(n * factorial(n - 1))}
}
sapply(X = 0:9, FUN = factorial)
print(paste0('gamma(10) = ', gamma(10), ', and 9! = ', factorial(9)))
@

\vspace{12pt}
\noindent\textbf{Exercise 4.} Create 3 five-element (row) vectors $\texttt{p}$, $\texttt{q}$, and $\texttt{r}$, such that $p$ contains the first 5 prime numbers, $q$ the first 5 numbers from the Fibonacci sequence, and $r$ the 5 first elements of the sequence $(\texttt{r}_n)_n$, such that $\texttt{r}_n = \lfloor\sqrt{(n \cdot \pi)}\rfloor$, $\forall n$, and $\lfloor \cdot \rfloor$ is the \textit{floor} function. Do NOT compute the terms manually (write functions!), so that you can easily extend it to larger vectors. Also, create the matrices 
$
\texttt{A} = 
\begin{pmatrix}
\texttt{p} \\
\texttt{q} \\
\texttt{r}
\end{pmatrix}
$, and $
\texttt{B} = 
\begin{pmatrix}
\texttt{p}^{\text{T}} & \texttt{q}^{\text{T}} & \texttt{r}^{\text{T}}
\end{pmatrix}$.

<<>>=
prime_seq <- function (n, i = 1, primes = c()) {
  if (length(primes) < n) {
    if (i == 2 || sum(as.numeric(i %% (1:i) == 0)) == 2) {
      prime_seq(n = n, i = i + 1, primes = c(primes, i))
    } else {
      prime_seq(n = n, i = i + 1, primes = primes)
    }
  } else {
    return(primes)
  }
}

fibonacci_seq <- function (n) {
  fib = c()
  for (i in 1:n) {
    if (i == 1) {
      fib <- c(fib, 0)
    } else if(i == 2) {
      fib <- c(fib, 1)
    } else {
      fib <- c(fib, fib[i - 1] + fib[i - 2])
    }
  }
  return(fib)
}

r_seq <- function (n) {return(floor(sqrt((1:n) * pi)))}

p <- prime_seq(n = 5); p
q <- fibonacci_seq(n = 5); q
r <- r_seq(5); r

A <- rbind(p, q, r); A
B <- cbind(p, q, r); B
@

\vspace{12pt}
\noindent\textbf{Exercise 5.} Suppose that, for the population of male teenagers, we can model their height as
\begin{align*}
\texttt{height}_i = \beta_0 + \beta_1 \cdot \texttt{age}_i + \epsilon_i, \text{ such that } \epsilon_i \sim \text{Normal}(0, \sigma^2_{\epsilon}).
\end{align*}
Now, for a random sample of size $n = 20$, we want to estimate $\boldsymbol{\beta} = (\beta_0, \beta_1)^{\text{T}}$ as $\hat{\boldsymbol{\beta}} = (\text{X}^{\text{T}}\text{X})^{-1}\text{X}^{\text{T}}\boldsymbol{y}$, such that $
\text{X} = 
\begin{pmatrix}
1 & \texttt{age}_1 \\
\vdots & \vdots \\
1 & \texttt{age}_{20}
\end{pmatrix}
$, and $\boldsymbol{y} = 
\begin{pmatrix}
\texttt{height}_1 \\
\vdots \\
\texttt{height}_{20}
\end{pmatrix}
$. Compute $\hat{\boldsymbol{\beta}}$ and plot $\hat{\boldsymbol{y}} = \text{X}\hat{\boldsymbol{\beta}}.$ For this exercise, generate the data set using the following code:

<<echo = T>>=
set.seed(999)
beta_0 <- 140
beta_1 <- 2
ages <- sample(x = 12:18, size = 20, replace = TRUE)
heights <- round(x = beta_0 + beta_1 * ages + rnorm(n = 10, mean = 0, sd = 2), 
                 digits = 2)
data <- data.frame(heights = heights, ages = ages)
@

<<fig.width = 7, fig.height = 5>>=
X <- cbind(rep(x = 1, times = 20), data$ages)
y <- as.matrix(data$heights)

beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y; beta_hat
y_hat <- X %*% beta_hat

plot(x = data$ages, y = data$heights, xlab = 'Age', ylab = 'Height (cm)') 
par(new = TRUE)
plot(x = data$ages, y = y_hat, type = 'b', col = 'red', axes = FALSE, 
     xlab = "", ylab = "")

# Alternatively
summary(lm(heights ~ ages, data))
@


\end{document}